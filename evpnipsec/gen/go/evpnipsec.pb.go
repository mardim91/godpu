// SPDX-License-Identifier: Apache-2.0
// Copyright (C) 2024 Ericsson AB.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.6.1
// source: evpnipsec.proto

package _go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	// Call succeeded
	Status_SUCCESS Status = 0
	// Call failed
	Status_FAILED Status = 1
	// Out of resources
	Status_OUT_OF_RES Status = 2
	// The suggested operation is already done
	Status_ALREADY_DONE Status = 3
	// Not supported
	Status_NOT_SUPPORTED Status = 4
	// One of the arguments is invalid
	Status_INVALID_ARG Status = 5
	// Something could not be found
	Status_NOT_FOUND Status = 6
	// Error while parsing
	Status_PARSE_ERROR Status = 7
	// Error while verifying
	Status_VERIFY_ERROR Status = 8
	// Object in invalid state
	Status_INVALID_STATE Status = 9
	// Destroy object which called method belongs to
	Status_DESTROY_ME Status = 10
	// Another call to the method is required
	Status_NEED_MORE Status = 11
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0:  "SUCCESS",
		1:  "FAILED",
		2:  "OUT_OF_RES",
		3:  "ALREADY_DONE",
		4:  "NOT_SUPPORTED",
		5:  "INVALID_ARG",
		6:  "NOT_FOUND",
		7:  "PARSE_ERROR",
		8:  "VERIFY_ERROR",
		9:  "INVALID_STATE",
		10: "DESTROY_ME",
		11: "NEED_MORE",
	}
	Status_value = map[string]int32{
		"SUCCESS":       0,
		"FAILED":        1,
		"OUT_OF_RES":    2,
		"ALREADY_DONE":  3,
		"NOT_SUPPORTED": 4,
		"INVALID_ARG":   5,
		"NOT_FOUND":     6,
		"PARSE_ERROR":   7,
		"VERIFY_ERROR":  8,
		"INVALID_STATE": 9,
		"DESTROY_ME":    10,
		"NEED_MORE":     11,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_evpnipsec_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_evpnipsec_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{0}
}

type IPSecProtocol int32

const (
	IPSecProtocol_IPSecProtoRSVD IPSecProtocol = 0
	IPSecProtocol_IPSecProtoESP  IPSecProtocol = 50
	IPSecProtocol_IPSecProtoAH   IPSecProtocol = 51
)

// Enum value maps for IPSecProtocol.
var (
	IPSecProtocol_name = map[int32]string{
		0:  "IPSecProtoRSVD",
		50: "IPSecProtoESP",
		51: "IPSecProtoAH",
	}
	IPSecProtocol_value = map[string]int32{
		"IPSecProtoRSVD": 0,
		"IPSecProtoESP":  50,
		"IPSecProtoAH":   51,
	}
)

func (x IPSecProtocol) Enum() *IPSecProtocol {
	p := new(IPSecProtocol)
	*p = x
	return p
}

func (x IPSecProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPSecProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_evpnipsec_proto_enumTypes[1].Descriptor()
}

func (IPSecProtocol) Type() protoreflect.EnumType {
	return &file_evpnipsec_proto_enumTypes[1]
}

func (x IPSecProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPSecProtocol.Descriptor instead.
func (IPSecProtocol) EnumDescriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{1}
}

type Bool int32

const (
	Bool_FALSE Bool = 0
	Bool_TRUE  Bool = 1
)

// Enum value maps for Bool.
var (
	Bool_name = map[int32]string{
		0: "FALSE",
		1: "TRUE",
	}
	Bool_value = map[string]int32{
		"FALSE": 0,
		"TRUE":  1,
	}
)

func (x Bool) Enum() *Bool {
	p := new(Bool)
	*p = x
	return p
}

func (x Bool) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bool) Descriptor() protoreflect.EnumDescriptor {
	return file_evpnipsec_proto_enumTypes[2].Descriptor()
}

func (Bool) Type() protoreflect.EnumType {
	return &file_evpnipsec_proto_enumTypes[2]
}

func (x Bool) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bool.Descriptor instead.
func (Bool) EnumDescriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{2}
}

// Cryptographic algorithm for encryption
type CryptoAlgorithm int32

const (
	CryptoAlgorithm_ENCR_RSVD               CryptoAlgorithm = 0
	CryptoAlgorithm_ENCR_NULL               CryptoAlgorithm = 11
	CryptoAlgorithm_ENCR_AES_CBC            CryptoAlgorithm = 12
	CryptoAlgorithm_ENCR_AES_CTR            CryptoAlgorithm = 13
	CryptoAlgorithm_ENCR_AES_CCM_8          CryptoAlgorithm = 14
	CryptoAlgorithm_ENCR_AES_CCM_12         CryptoAlgorithm = 15
	CryptoAlgorithm_ENCR_AES_CCM_16         CryptoAlgorithm = 16
	CryptoAlgorithm_ENCR_AES_GCM_8          CryptoAlgorithm = 18
	CryptoAlgorithm_ENCR_AES_GCM_12         CryptoAlgorithm = 19
	CryptoAlgorithm_ENCR_AES_GCM_16         CryptoAlgorithm = 20
	CryptoAlgorithm_ENCR_NULL_AUTH_AES_GMAC CryptoAlgorithm = 21
	CryptoAlgorithm_ENCR_CHACHA20_POLY1305  CryptoAlgorithm = 28
)

// Enum value maps for CryptoAlgorithm.
var (
	CryptoAlgorithm_name = map[int32]string{
		0:  "ENCR_RSVD",
		11: "ENCR_NULL",
		12: "ENCR_AES_CBC",
		13: "ENCR_AES_CTR",
		14: "ENCR_AES_CCM_8",
		15: "ENCR_AES_CCM_12",
		16: "ENCR_AES_CCM_16",
		18: "ENCR_AES_GCM_8",
		19: "ENCR_AES_GCM_12",
		20: "ENCR_AES_GCM_16",
		21: "ENCR_NULL_AUTH_AES_GMAC",
		28: "ENCR_CHACHA20_POLY1305",
	}
	CryptoAlgorithm_value = map[string]int32{
		"ENCR_RSVD":               0,
		"ENCR_NULL":               11,
		"ENCR_AES_CBC":            12,
		"ENCR_AES_CTR":            13,
		"ENCR_AES_CCM_8":          14,
		"ENCR_AES_CCM_12":         15,
		"ENCR_AES_CCM_16":         16,
		"ENCR_AES_GCM_8":          18,
		"ENCR_AES_GCM_12":         19,
		"ENCR_AES_GCM_16":         20,
		"ENCR_NULL_AUTH_AES_GMAC": 21,
		"ENCR_CHACHA20_POLY1305":  28,
	}
)

func (x CryptoAlgorithm) Enum() *CryptoAlgorithm {
	p := new(CryptoAlgorithm)
	*p = x
	return p
}

func (x CryptoAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_evpnipsec_proto_enumTypes[3].Descriptor()
}

func (CryptoAlgorithm) Type() protoreflect.EnumType {
	return &file_evpnipsec_proto_enumTypes[3]
}

func (x CryptoAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CryptoAlgorithm.Descriptor instead.
func (CryptoAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{3}
}

// Cryptographic algorithm for authentication
type IntegAlgorithm int32

const (
	IntegAlgorithm_NONE                   IntegAlgorithm = 0
	IntegAlgorithm_AUTH_HMAC_SHA1_96      IntegAlgorithm = 2
	IntegAlgorithm_AUTH_AES_XCBC_96       IntegAlgorithm = 5
	IntegAlgorithm_AUTH_AES_CMAC_96       IntegAlgorithm = 8
	IntegAlgorithm_AUTH_AES_128_GMAC      IntegAlgorithm = 9
	IntegAlgorithm_AUTH_AES_192_GMAC      IntegAlgorithm = 10
	IntegAlgorithm_AUTH_AES_256_GMAC      IntegAlgorithm = 11
	IntegAlgorithm_AUTH_HMAC_SHA2_256_128 IntegAlgorithm = 12
	IntegAlgorithm_AUTH_HMAC_SHA2_384_192 IntegAlgorithm = 13
	IntegAlgorithm_AUTH_HMAC_SHA2_512_256 IntegAlgorithm = 14
	IntegAlgorithm_AUTH_UNDEFINED         IntegAlgorithm = 1024
)

// Enum value maps for IntegAlgorithm.
var (
	IntegAlgorithm_name = map[int32]string{
		0:    "NONE",
		2:    "AUTH_HMAC_SHA1_96",
		5:    "AUTH_AES_XCBC_96",
		8:    "AUTH_AES_CMAC_96",
		9:    "AUTH_AES_128_GMAC",
		10:   "AUTH_AES_192_GMAC",
		11:   "AUTH_AES_256_GMAC",
		12:   "AUTH_HMAC_SHA2_256_128",
		13:   "AUTH_HMAC_SHA2_384_192",
		14:   "AUTH_HMAC_SHA2_512_256",
		1024: "AUTH_UNDEFINED",
	}
	IntegAlgorithm_value = map[string]int32{
		"NONE":                   0,
		"AUTH_HMAC_SHA1_96":      2,
		"AUTH_AES_XCBC_96":       5,
		"AUTH_AES_CMAC_96":       8,
		"AUTH_AES_128_GMAC":      9,
		"AUTH_AES_192_GMAC":      10,
		"AUTH_AES_256_GMAC":      11,
		"AUTH_HMAC_SHA2_256_128": 12,
		"AUTH_HMAC_SHA2_384_192": 13,
		"AUTH_HMAC_SHA2_512_256": 14,
		"AUTH_UNDEFINED":         1024,
	}
)

func (x IntegAlgorithm) Enum() *IntegAlgorithm {
	p := new(IntegAlgorithm)
	*p = x
	return p
}

func (x IntegAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntegAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_evpnipsec_proto_enumTypes[4].Descriptor()
}

func (IntegAlgorithm) Type() protoreflect.EnumType {
	return &file_evpnipsec_proto_enumTypes[4]
}

func (x IntegAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntegAlgorithm.Descriptor instead.
func (IntegAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{4}
}

type DSCPCopy int32

const (
	DSCPCopy_DSCP_COPY_OUT_ONLY DSCPCopy = 0
	DSCPCopy_DSCP_COPY_IN_ONLY  DSCPCopy = 1
	DSCPCopy_DSCP_COPY_YES      DSCPCopy = 2
	DSCPCopy_DSCP_COPY_NO       DSCPCopy = 3
)

// Enum value maps for DSCPCopy.
var (
	DSCPCopy_name = map[int32]string{
		0: "DSCP_COPY_OUT_ONLY",
		1: "DSCP_COPY_IN_ONLY",
		2: "DSCP_COPY_YES",
		3: "DSCP_COPY_NO",
	}
	DSCPCopy_value = map[string]int32{
		"DSCP_COPY_OUT_ONLY": 0,
		"DSCP_COPY_IN_ONLY":  1,
		"DSCP_COPY_YES":      2,
		"DSCP_COPY_NO":       3,
	}
)

func (x DSCPCopy) Enum() *DSCPCopy {
	p := new(DSCPCopy)
	*p = x
	return p
}

func (x DSCPCopy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DSCPCopy) Descriptor() protoreflect.EnumDescriptor {
	return file_evpnipsec_proto_enumTypes[5].Descriptor()
}

func (DSCPCopy) Type() protoreflect.EnumType {
	return &file_evpnipsec_proto_enumTypes[5]
}

func (x DSCPCopy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DSCPCopy.Descriptor instead.
func (DSCPCopy) EnumDescriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{5}
}

type IPSecMode int32

const (
	// not using any encapsulation
	IPSecMode_MODE_NONE IPSecMode = 0
	// transport mode, no inner address
	IPSecMode_MODE_TRANSPORT IPSecMode = 1
	// tunnel mode, inner and outer addresses
	IPSecMode_MODE_TUNNEL IPSecMode = 2
	// BEET mode, tunnel mode but fixed, bound inner addresses
	IPSecMode_MODE_BEET IPSecMode = 3
	// passthrough policy for traffic without an IPsec SA
	IPSecMode_MODE_PASS IPSecMode = 4
	// drop policy discarding traffic
	IPSecMode_MODE_DROP IPSecMode = 5
)

// Enum value maps for IPSecMode.
var (
	IPSecMode_name = map[int32]string{
		0: "MODE_NONE",
		1: "MODE_TRANSPORT",
		2: "MODE_TUNNEL",
		3: "MODE_BEET",
		4: "MODE_PASS",
		5: "MODE_DROP",
	}
	IPSecMode_value = map[string]int32{
		"MODE_NONE":      0,
		"MODE_TRANSPORT": 1,
		"MODE_TUNNEL":    2,
		"MODE_BEET":      3,
		"MODE_PASS":      4,
		"MODE_DROP":      5,
	}
)

func (x IPSecMode) Enum() *IPSecMode {
	p := new(IPSecMode)
	*p = x
	return p
}

func (x IPSecMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPSecMode) Descriptor() protoreflect.EnumDescriptor {
	return file_evpnipsec_proto_enumTypes[6].Descriptor()
}

func (IPSecMode) Type() protoreflect.EnumType {
	return &file_evpnipsec_proto_enumTypes[6]
}

func (x IPSecMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPSecMode.Descriptor instead.
func (IPSecMode) EnumDescriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{6}
}

type Features struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Features uint32 `protobuf:"varint,1,opt,name=features,proto3" json:"features,omitempty"`
}

func (x *Features) Reset() {
	*x = Features{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Features) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Features) ProtoMessage() {}

func (x *Features) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Features.ProtoReflect.Descriptor instead.
func (*Features) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{0}
}

func (x *Features) GetFeatures() uint32 {
	if x != nil {
		return x.Features
	}
	return 0
}

type GetSPIReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src      string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Dst      string `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	Protocol uint32 `protobuf:"varint,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *GetSPIReq) Reset() {
	*x = GetSPIReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSPIReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSPIReq) ProtoMessage() {}

func (x *GetSPIReq) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSPIReq.ProtoReflect.Descriptor instead.
func (*GetSPIReq) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{1}
}

func (x *GetSPIReq) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *GetSPIReq) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *GetSPIReq) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

type GetSPIResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stat Status `protobuf:"varint,1,opt,name=stat,proto3,enum=godpu.evpnipsec.Status" json:"stat,omitempty"`
	Spi  uint32 `protobuf:"varint,2,opt,name=spi,proto3" json:"spi,omitempty"`
}

func (x *GetSPIResp) Reset() {
	*x = GetSPIResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSPIResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSPIResp) ProtoMessage() {}

func (x *GetSPIResp) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSPIResp.ProtoReflect.Descriptor instead.
func (*GetSPIResp) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{2}
}

func (x *GetSPIResp) GetStat() Status {
	if x != nil {
		return x.Stat
	}
	return Status_SUCCESS
}

func (x *GetSPIResp) GetSpi() uint32 {
	if x != nil {
		return x.Spi
	}
	return 0
}

type AddSAReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaId   *SAIdentifier `protobuf:"bytes,1,opt,name=sa_id,json=saId,proto3" json:"sa_id,omitempty"`
	SaData *AddSAReqData `protobuf:"bytes,2,opt,name=sa_data,json=saData,proto3" json:"sa_data,omitempty"`
}

func (x *AddSAReq) Reset() {
	*x = AddSAReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSAReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSAReq) ProtoMessage() {}

func (x *AddSAReq) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSAReq.ProtoReflect.Descriptor instead.
func (*AddSAReq) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{3}
}

func (x *AddSAReq) GetSaId() *SAIdentifier {
	if x != nil {
		return x.SaId
	}
	return nil
}

func (x *AddSAReq) GetSaData() *AddSAReqData {
	if x != nil {
		return x.SaData
	}
	return nil
}

type AddSAResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stat Status `protobuf:"varint,1,opt,name=stat,proto3,enum=godpu.evpnipsec.Status" json:"stat,omitempty"`
}

func (x *AddSAResp) Reset() {
	*x = AddSAResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSAResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSAResp) ProtoMessage() {}

func (x *AddSAResp) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSAResp.ProtoReflect.Descriptor instead.
func (*AddSAResp) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{4}
}

func (x *AddSAResp) GetStat() Status {
	if x != nil {
		return x.Stat
	}
	return Status_SUCCESS
}

type UpdateSAReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaId   *SAIdentifier    `protobuf:"bytes,1,opt,name=sa_id,json=saId,proto3" json:"sa_id,omitempty"`
	SaData *UpdateSAReqData `protobuf:"bytes,2,opt,name=sa_data,json=saData,proto3" json:"sa_data,omitempty"`
}

func (x *UpdateSAReq) Reset() {
	*x = UpdateSAReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSAReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSAReq) ProtoMessage() {}

func (x *UpdateSAReq) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSAReq.ProtoReflect.Descriptor instead.
func (*UpdateSAReq) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateSAReq) GetSaId() *SAIdentifier {
	if x != nil {
		return x.SaId
	}
	return nil
}

func (x *UpdateSAReq) GetSaData() *UpdateSAReqData {
	if x != nil {
		return x.SaData
	}
	return nil
}

type UpdateSAResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stat Status `protobuf:"varint,1,opt,name=stat,proto3,enum=godpu.evpnipsec.Status" json:"stat,omitempty"`
}

func (x *UpdateSAResp) Reset() {
	*x = UpdateSAResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSAResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSAResp) ProtoMessage() {}

func (x *UpdateSAResp) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSAResp.ProtoReflect.Descriptor instead.
func (*UpdateSAResp) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateSAResp) GetStat() Status {
	if x != nil {
		return x.Stat
	}
	return Status_SUCCESS
}

type QuerySAReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaId *SAIdentifier `protobuf:"bytes,1,opt,name=sa_id,json=saId,proto3" json:"sa_id,omitempty"` // cpi omitted
}

func (x *QuerySAReq) Reset() {
	*x = QuerySAReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySAReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySAReq) ProtoMessage() {}

func (x *QuerySAReq) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySAReq.ProtoReflect.Descriptor instead.
func (*QuerySAReq) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{7}
}

func (x *QuerySAReq) GetSaId() *SAIdentifier {
	if x != nil {
		return x.SaId
	}
	return nil
}

type QuerySAResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stat    Status `protobuf:"varint,1,opt,name=stat,proto3,enum=godpu.evpnipsec.Status" json:"stat,omitempty"`
	Bytes   uint64 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Packets uint64 `protobuf:"varint,3,opt,name=packets,proto3" json:"packets,omitempty"`
	Time    uint32 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *QuerySAResp) Reset() {
	*x = QuerySAResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySAResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySAResp) ProtoMessage() {}

func (x *QuerySAResp) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySAResp.ProtoReflect.Descriptor instead.
func (*QuerySAResp) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{8}
}

func (x *QuerySAResp) GetStat() Status {
	if x != nil {
		return x.Stat
	}
	return Status_SUCCESS
}

func (x *QuerySAResp) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *QuerySAResp) GetPackets() uint64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *QuerySAResp) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type DeleteSAReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaId *SAIdentifier `protobuf:"bytes,1,opt,name=sa_id,json=saId,proto3" json:"sa_id,omitempty"` // cpi omitted
}

func (x *DeleteSAReq) Reset() {
	*x = DeleteSAReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSAReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSAReq) ProtoMessage() {}

func (x *DeleteSAReq) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSAReq.ProtoReflect.Descriptor instead.
func (*DeleteSAReq) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteSAReq) GetSaId() *SAIdentifier {
	if x != nil {
		return x.SaId
	}
	return nil
}

type DeleteSAResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stat Status `protobuf:"varint,1,opt,name=stat,proto3,enum=godpu.evpnipsec.Status" json:"stat,omitempty"`
}

func (x *DeleteSAResp) Reset() {
	*x = DeleteSAResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSAResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSAResp) ProtoMessage() {}

func (x *DeleteSAResp) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSAResp.ProtoReflect.Descriptor instead.
func (*DeleteSAResp) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteSAResp) GetStat() Status {
	if x != nil {
		return x.Stat
	}
	return Status_SUCCESS
}

type FlushSAsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlushSAsReq) Reset() {
	*x = FlushSAsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushSAsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushSAsReq) ProtoMessage() {}

func (x *FlushSAsReq) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushSAsReq.ProtoReflect.Descriptor instead.
func (*FlushSAsReq) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{11}
}

type FlushSAsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stat Status `protobuf:"varint,1,opt,name=stat,proto3,enum=godpu.evpnipsec.Status" json:"stat,omitempty"`
}

func (x *FlushSAsResp) Reset() {
	*x = FlushSAsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushSAsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushSAsResp) ProtoMessage() {}

func (x *FlushSAsResp) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushSAsResp.ProtoReflect.Descriptor instead.
func (*FlushSAsResp) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{12}
}

func (x *FlushSAsResp) GetStat() Status {
	if x != nil {
		return x.Stat
	}
	return Status_SUCCESS
}

type SAIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * Source address or hostname
	Src string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	// * Destination address or hostname
	Dst string `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	// * SPI
	Spi uint32 `protobuf:"varint,3,opt,name=spi,proto3" json:"spi,omitempty"`
	// * Protocol (ESP/AH)
	Proto IPSecProtocol `protobuf:"varint,4,opt,name=proto,proto3,enum=godpu.evpnipsec.IPSecProtocol" json:"proto,omitempty"` //* Optional interface ID
	// Mandatory for IPU
	IfId uint32 `protobuf:"varint,5,opt,name=if_id,json=ifId,proto3" json:"if_id,omitempty"`
}

func (x *SAIdentifier) Reset() {
	*x = SAIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAIdentifier) ProtoMessage() {}

func (x *SAIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAIdentifier.ProtoReflect.Descriptor instead.
func (*SAIdentifier) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{13}
}

func (x *SAIdentifier) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *SAIdentifier) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *SAIdentifier) GetSpi() uint32 {
	if x != nil {
		return x.Spi
	}
	return 0
}

func (x *SAIdentifier) GetProto() IPSecProtocol {
	if x != nil {
		return x.Proto
	}
	return IPSecProtocol_IPSecProtoRSVD
}

func (x *SAIdentifier) GetIfId() uint32 {
	if x != nil {
		return x.IfId
	}
	return 0
}

type AddSAReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * Reqid
	Reqid uint32 `protobuf:"varint,1,opt,name=reqid,proto3" json:"reqid,omitempty"`
	// * Mode (tunnel, transport...)
	Mode IPSecMode `protobuf:"varint,2,opt,name=mode,proto3,enum=godpu.evpnipsec.IPSecMode" json:"mode,omitempty"`
	// * List of source traffic selectors
	SrcTs *TrafficSelectors `protobuf:"bytes,3,opt,name=src_ts,json=srcTs,proto3" json:"src_ts,omitempty"`
	// * List of destination traffic selectors
	DstTs *TrafficSelectors `protobuf:"bytes,4,opt,name=dst_ts,json=dstTs,proto3" json:"dst_ts,omitempty"`
	// * Network interface restricting policy
	Interface string `protobuf:"bytes,5,opt,name=interface,proto3" json:"interface,omitempty"`
	// * Lifetime configuration
	Lifetime *LifeTimeCfg `protobuf:"bytes,6,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	// * Encryption algorithm
	EncAlg CryptoAlgorithm `protobuf:"varint,7,opt,name=enc_alg,json=encAlg,proto3,enum=godpu.evpnipsec.CryptoAlgorithm" json:"enc_alg,omitempty"`
	// * Encryption key
	EncKey []byte `protobuf:"bytes,8,opt,name=enc_key,json=encKey,proto3" json:"enc_key,omitempty"`
	// * Integrity protection algorithm
	IntAlg IntegAlgorithm `protobuf:"varint,9,opt,name=int_alg,json=intAlg,proto3,enum=godpu.evpnipsec.IntegAlgorithm" json:"int_alg,omitempty"`
	// * Integrity protection key
	IntKey []byte `protobuf:"bytes,10,opt,name=int_key,json=intKey,proto3" json:"int_key,omitempty"`
	// * Anti-replay window size
	ReplayWindow uint32 `protobuf:"varint,11,opt,name=replay_window,json=replayWindow,proto3" json:"replay_window,omitempty"`
	// * Traffic Flow Confidentiality padding
	Tfc uint32 `protobuf:"varint,12,opt,name=tfc,proto3" json:"tfc,omitempty"`
	// * TRUE to enable UDP encapsulation for NAT traversal
	Encap Bool `protobuf:"varint,13,opt,name=encap,proto3,enum=godpu.evpnipsec.Bool" json:"encap,omitempty"`
	// * Mark the SA should apply to packets after processing
	Esn Bool `protobuf:"varint,14,opt,name=esn,proto3,enum=godpu.evpnipsec.Bool" json:"esn,omitempty"`
	// * TRUE to copy the DF bit to the outer IPv4 header in tunnel mode
	CopyDf Bool `protobuf:"varint,15,opt,name=copy_df,json=copyDf,proto3,enum=godpu.evpnipsec.Bool" json:"copy_df,omitempty"`
	// * TRUE to copy the ECN header field to/from the outer header
	CopyEcn Bool `protobuf:"varint,16,opt,name=copy_ecn,json=copyEcn,proto3,enum=godpu.evpnipsec.Bool" json:"copy_ecn,omitempty"`
	// * Whether to copy the DSCP header field to/from the outer header
	CopyDscp DSCPCopy `protobuf:"varint,17,opt,name=copy_dscp,json=copyDscp,proto3,enum=godpu.evpnipsec.DSCPCopy" json:"copy_dscp,omitempty"`
	// * TRUE if initiator of the exchange creating the SA
	Initiator Bool `protobuf:"varint,18,opt,name=initiator,proto3,enum=godpu.evpnipsec.Bool" json:"initiator,omitempty"`
	// * TRUE if this is an inbound SA
	Inbound Bool `protobuf:"varint,19,opt,name=inbound,proto3,enum=godpu.evpnipsec.Bool" json:"inbound,omitempty"`
	// * TRUE if an SPI has already been allocated for this SA
	Update Bool `protobuf:"varint,20,opt,name=update,proto3,enum=godpu.evpnipsec.Bool" json:"update,omitempty"`
}

func (x *AddSAReqData) Reset() {
	*x = AddSAReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSAReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSAReqData) ProtoMessage() {}

func (x *AddSAReqData) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSAReqData.ProtoReflect.Descriptor instead.
func (*AddSAReqData) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{14}
}

func (x *AddSAReqData) GetReqid() uint32 {
	if x != nil {
		return x.Reqid
	}
	return 0
}

func (x *AddSAReqData) GetMode() IPSecMode {
	if x != nil {
		return x.Mode
	}
	return IPSecMode_MODE_NONE
}

func (x *AddSAReqData) GetSrcTs() *TrafficSelectors {
	if x != nil {
		return x.SrcTs
	}
	return nil
}

func (x *AddSAReqData) GetDstTs() *TrafficSelectors {
	if x != nil {
		return x.DstTs
	}
	return nil
}

func (x *AddSAReqData) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *AddSAReqData) GetLifetime() *LifeTimeCfg {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *AddSAReqData) GetEncAlg() CryptoAlgorithm {
	if x != nil {
		return x.EncAlg
	}
	return CryptoAlgorithm_ENCR_RSVD
}

func (x *AddSAReqData) GetEncKey() []byte {
	if x != nil {
		return x.EncKey
	}
	return nil
}

func (x *AddSAReqData) GetIntAlg() IntegAlgorithm {
	if x != nil {
		return x.IntAlg
	}
	return IntegAlgorithm_NONE
}

func (x *AddSAReqData) GetIntKey() []byte {
	if x != nil {
		return x.IntKey
	}
	return nil
}

func (x *AddSAReqData) GetReplayWindow() uint32 {
	if x != nil {
		return x.ReplayWindow
	}
	return 0
}

func (x *AddSAReqData) GetTfc() uint32 {
	if x != nil {
		return x.Tfc
	}
	return 0
}

func (x *AddSAReqData) GetEncap() Bool {
	if x != nil {
		return x.Encap
	}
	return Bool_FALSE
}

func (x *AddSAReqData) GetEsn() Bool {
	if x != nil {
		return x.Esn
	}
	return Bool_FALSE
}

func (x *AddSAReqData) GetCopyDf() Bool {
	if x != nil {
		return x.CopyDf
	}
	return Bool_FALSE
}

func (x *AddSAReqData) GetCopyEcn() Bool {
	if x != nil {
		return x.CopyEcn
	}
	return Bool_FALSE
}

func (x *AddSAReqData) GetCopyDscp() DSCPCopy {
	if x != nil {
		return x.CopyDscp
	}
	return DSCPCopy_DSCP_COPY_OUT_ONLY
}

func (x *AddSAReqData) GetInitiator() Bool {
	if x != nil {
		return x.Initiator
	}
	return Bool_FALSE
}

func (x *AddSAReqData) GetInbound() Bool {
	if x != nil {
		return x.Inbound
	}
	return Bool_FALSE
}

func (x *AddSAReqData) GetUpdate() Bool {
	if x != nil {
		return x.Update
	}
	return Bool_FALSE
}

type UpdateSAReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * New source address
	NewSrc string `protobuf:"bytes,1,opt,name=new_src,json=newSrc,proto3" json:"new_src,omitempty"`
	// * New destination address
	NewDst string `protobuf:"bytes,2,opt,name=new_dst,json=newDst,proto3" json:"new_dst,omitempty"`
	// * TRUE if UDP encapsulation is currently enabled
	Encap Bool `protobuf:"varint,3,opt,name=encap,proto3,enum=godpu.evpnipsec.Bool" json:"encap,omitempty"`
	// * TRUE to enable UDP encapsulation
	NewEncap Bool `protobuf:"varint,4,opt,name=new_encap,json=newEncap,proto3,enum=godpu.evpnipsec.Bool" json:"new_encap,omitempty"`
}

func (x *UpdateSAReqData) Reset() {
	*x = UpdateSAReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSAReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSAReqData) ProtoMessage() {}

func (x *UpdateSAReqData) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSAReqData.ProtoReflect.Descriptor instead.
func (*UpdateSAReqData) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateSAReqData) GetNewSrc() string {
	if x != nil {
		return x.NewSrc
	}
	return ""
}

func (x *UpdateSAReqData) GetNewDst() string {
	if x != nil {
		return x.NewDst
	}
	return ""
}

func (x *UpdateSAReqData) GetEncap() Bool {
	if x != nil {
		return x.Encap
	}
	return Bool_FALSE
}

func (x *UpdateSAReqData) GetNewEncap() Bool {
	if x != nil {
		return x.NewEncap
	}
	return Bool_FALSE
}

type TrafficSelectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts []*TrafficSelectors_TrafficSelector `protobuf:"bytes,1,rep,name=ts,proto3" json:"ts,omitempty"`
}

func (x *TrafficSelectors) Reset() {
	*x = TrafficSelectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficSelectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficSelectors) ProtoMessage() {}

func (x *TrafficSelectors) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficSelectors.ProtoReflect.Descriptor instead.
func (*TrafficSelectors) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{16}
}

func (x *TrafficSelectors) GetTs() []*TrafficSelectors_TrafficSelector {
	if x != nil {
		return x.Ts
	}
	return nil
}

type LifeTimeCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    *LifeTime `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Bytes   *LifeTime `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Packets *LifeTime `protobuf:"bytes,3,opt,name=packets,proto3" json:"packets,omitempty"`
}

func (x *LifeTimeCfg) Reset() {
	*x = LifeTimeCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifeTimeCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifeTimeCfg) ProtoMessage() {}

func (x *LifeTimeCfg) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifeTimeCfg.ProtoReflect.Descriptor instead.
func (*LifeTimeCfg) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{17}
}

func (x *LifeTimeCfg) GetTime() *LifeTime {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *LifeTimeCfg) GetBytes() *LifeTime {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *LifeTimeCfg) GetPackets() *LifeTime {
	if x != nil {
		return x.Packets
	}
	return nil
}

type LifeTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit before the SA gets invalid.
	Life uint64 `protobuf:"varint,1,opt,name=life,proto3" json:"life,omitempty"`
	// Limit before the SA gets rekeyed.
	Rekey uint64 `protobuf:"varint,2,opt,name=rekey,proto3" json:"rekey,omitempty"`
	// The range of a random value subtracted from rekey.
	Jitter uint64 `protobuf:"varint,3,opt,name=jitter,proto3" json:"jitter,omitempty"`
}

func (x *LifeTime) Reset() {
	*x = LifeTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifeTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifeTime) ProtoMessage() {}

func (x *LifeTime) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifeTime.ProtoReflect.Descriptor instead.
func (*LifeTime) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{18}
}

func (x *LifeTime) GetLife() uint64 {
	if x != nil {
		return x.Life
	}
	return 0
}

func (x *LifeTime) GetRekey() uint64 {
	if x != nil {
		return x.Rekey
	}
	return 0
}

func (x *LifeTime) GetJitter() uint64 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

type TrafficSelectors_TrafficSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cidr  string `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Proto string `protobuf:"bytes,2,opt,name=proto,proto3" json:"proto,omitempty"`
	Port  string `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *TrafficSelectors_TrafficSelector) Reset() {
	*x = TrafficSelectors_TrafficSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evpnipsec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficSelectors_TrafficSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficSelectors_TrafficSelector) ProtoMessage() {}

func (x *TrafficSelectors_TrafficSelector) ProtoReflect() protoreflect.Message {
	mi := &file_evpnipsec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficSelectors_TrafficSelector.ProtoReflect.Descriptor instead.
func (*TrafficSelectors_TrafficSelector) Descriptor() ([]byte, []int) {
	return file_evpnipsec_proto_rawDescGZIP(), []int{16, 0}
}

func (x *TrafficSelectors_TrafficSelector) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *TrafficSelectors_TrafficSelector) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *TrafficSelectors_TrafficSelector) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

var File_evpnipsec_proto protoreflect.FileDescriptor

var file_evpnipsec_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73,
	0x65, 0x63, 0x22, 0x26, 0x0a, 0x08, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x53, 0x50, 0x49, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x4b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x50,
	0x49, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e,
	0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x73, 0x74,
	0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x73, 0x70, 0x69, 0x22, 0x76, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x53, 0x41, 0x52, 0x65, 0x71,
	0x12, 0x32, 0x0a, 0x05, 0x73, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65,
	0x63, 0x2e, 0x53, 0x41, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04,
	0x73, 0x61, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76,
	0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x41, 0x52, 0x65, 0x71,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x38, 0x0a, 0x09,
	0x41, 0x64, 0x64, 0x53, 0x41, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x74, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e,
	0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x04, 0x73, 0x74, 0x61, 0x74, 0x22, 0x7c, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x41, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70,
	0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x53, 0x41, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x04, 0x73, 0x61, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x64,
	0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x41, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x41,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69,
	0x70, 0x73, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x73, 0x74, 0x61,
	0x74, 0x22, 0x40, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x41, 0x52, 0x65, 0x71, 0x12,
	0x32, 0x0a, 0x05, 0x73, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63,
	0x2e, 0x53, 0x41, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x73,
	0x61, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x41, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73,
	0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x73, 0x74, 0x61, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x41, 0x52,
	0x65, 0x71, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70,
	0x73, 0x65, 0x63, 0x2e, 0x53, 0x41, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x04, 0x73, 0x61, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x41, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70,
	0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x73,
	0x74, 0x61, 0x74, 0x22, 0x0d, 0x0a, 0x0b, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x41, 0x73, 0x52,
	0x65, 0x71, 0x22, 0x3b, 0x0a, 0x0c, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x41, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73,
	0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x73, 0x74, 0x61, 0x74, 0x22,
	0x8f, 0x01, 0x0a, 0x0c, 0x53, 0x41, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x64, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x73, 0x70, 0x69, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76,
	0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x63, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x0a, 0x05,
	0x69, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x66, 0x49,
	0x64, 0x22, 0x83, 0x07, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x53, 0x41, 0x52, 0x65, 0x71, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x72, 0x65, 0x71, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65,
	0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x63, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75,
	0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x05, 0x73, 0x72, 0x63,
	0x54, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69,
	0x70, 0x73, 0x65, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x05, 0x64, 0x73, 0x74, 0x54, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x4c,
	0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x66, 0x67, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x5f, 0x61, 0x6c, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76,
	0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x06, 0x65, 0x6e, 0x63, 0x41, 0x6c, 0x67, 0x12,
	0x17, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x65, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x5f,
	0x61, 0x6c, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x64, 0x70,
	0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x41,
	0x6c, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x66, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74,
	0x66, 0x63, 0x12, 0x2b, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70,
	0x73, 0x65, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x12,
	0x27, 0x0a, 0x03, 0x65, 0x73, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67,
	0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x03, 0x65, 0x73, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x70, 0x79,
	0x5f, 0x64, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x64, 0x70,
	0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x06, 0x63, 0x6f, 0x70, 0x79, 0x44, 0x66, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x6f, 0x70, 0x79,
	0x5f, 0x65, 0x63, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x64,
	0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x07, 0x63, 0x6f, 0x70, 0x79, 0x45, 0x63, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f,
	0x70, 0x79, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e,
	0x44, 0x53, 0x43, 0x50, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x44, 0x73,
	0x63, 0x70, 0x12, 0x33, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76,
	0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75,
	0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75,
	0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x41, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x65, 0x77, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65,
	0x77, 0x53, 0x72, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x44, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x05, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67,
	0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x65,
	0x77, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x22, 0xa6,
	0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65,
	0x63, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x02, 0x74, 0x73, 0x1a, 0x4f, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x66, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x66, 0x67, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76,
	0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76,
	0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75,
	0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x08,
	0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x66, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6c, 0x69, 0x66, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x6b,
	0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2a, 0xcb, 0x01, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41,
	0x52, 0x47, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x53,
	0x54, 0x52, 0x4f, 0x59, 0x5f, 0x4d, 0x45, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x45,
	0x44, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x10, 0x0b, 0x2a, 0x48, 0x0a, 0x0d, 0x49, 0x50, 0x53, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x50, 0x53,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x53, 0x56, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x50, 0x53, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x53, 0x50, 0x10, 0x32,
	0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x53, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x48,
	0x10, 0x33, 0x2a, 0x1b, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41,
	0x4c, 0x53, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x2a,
	0x88, 0x02, 0x0a, 0x0f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e, 0x43, 0x52, 0x5f, 0x52, 0x53, 0x56, 0x44,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e, 0x43, 0x52, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10,
	0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x43, 0x52, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x42,
	0x43, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x43, 0x52, 0x5f, 0x41, 0x45, 0x53, 0x5f,
	0x43, 0x54, 0x52, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x43, 0x52, 0x5f, 0x41, 0x45,
	0x53, 0x5f, 0x43, 0x43, 0x4d, 0x5f, 0x38, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x43,
	0x52, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x43, 0x4d, 0x5f, 0x31, 0x32, 0x10, 0x0f, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4e, 0x43, 0x52, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x43, 0x4d, 0x5f, 0x31,
	0x36, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x43, 0x52, 0x5f, 0x41, 0x45, 0x53, 0x5f,
	0x47, 0x43, 0x4d, 0x5f, 0x38, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x43, 0x52, 0x5f,
	0x41, 0x45, 0x53, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x31, 0x32, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4e, 0x43, 0x52, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x31, 0x36, 0x10,
	0x14, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x43, 0x52, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x47, 0x4d, 0x41, 0x43, 0x10, 0x15, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x4e, 0x43, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x43, 0x48, 0x41, 0x32, 0x30, 0x5f,
	0x50, 0x4f, 0x4c, 0x59, 0x31, 0x33, 0x30, 0x35, 0x10, 0x1c, 0x2a, 0x8b, 0x02, 0x0a, 0x0e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x31, 0x5f, 0x39, 0x36, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x58, 0x43, 0x42, 0x43, 0x5f,
	0x39, 0x36, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53,
	0x5f, 0x43, 0x4d, 0x41, 0x43, 0x5f, 0x39, 0x36, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x4d, 0x41, 0x43, 0x10,
	0x09, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x39,
	0x32, 0x5f, 0x47, 0x4d, 0x41, 0x43, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x4d, 0x41, 0x43, 0x10, 0x0b, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41,
	0x32, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x5f, 0x33, 0x38,
	0x34, 0x5f, 0x31, 0x39, 0x32, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x5f, 0x35, 0x31, 0x32, 0x5f, 0x32, 0x35,
	0x36, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0e, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x80, 0x08, 0x2a, 0x5e, 0x0a, 0x08, 0x44, 0x53, 0x43, 0x50,
	0x43, 0x6f, 0x70, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x53, 0x43, 0x50, 0x5f, 0x43, 0x4f, 0x50,
	0x59, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x53, 0x43, 0x50, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x53, 0x43, 0x50, 0x5f, 0x43, 0x4f, 0x50, 0x59,
	0x5f, 0x59, 0x45, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x53, 0x43, 0x50, 0x5f, 0x43,
	0x4f, 0x50, 0x59, 0x5f, 0x4e, 0x4f, 0x10, 0x03, 0x2a, 0x6c, 0x0a, 0x09, 0x49, 0x50, 0x53, 0x65,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x42, 0x45, 0x45, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x10, 0x05, 0x32, 0xfe, 0x03, 0x0a, 0x05, 0x49, 0x50, 0x53, 0x65, 0x63,
	0x12, 0x45, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x19, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65,
	0x63, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x19, 0x2e, 0x67, 0x6f, 0x64,
	0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x53, 0x50,
	0x49, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70,
	0x73, 0x65, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x50, 0x49, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e,
	0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x05,
	0x41, 0x64, 0x64, 0x53, 0x41, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76,
	0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x41, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73,
	0x65, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x41, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x41, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x64,
	0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x41, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75,
	0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x41, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x07, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x41, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70,
	0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x41, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70,
	0x73, 0x65, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x41, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x41, 0x12, 0x1c, 0x2e,
	0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x41, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x6f,
	0x64, 0x70, 0x75, 0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x41, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x08,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x41, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75,
	0x2e, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x53, 0x41, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2e, 0x65,
	0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x41,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x67, 0x6f, 0x64, 0x70, 0x75, 0x2f, 0x65, 0x76, 0x70, 0x6e, 0x69, 0x70, 0x73, 0x65, 0x63,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_evpnipsec_proto_rawDescOnce sync.Once
	file_evpnipsec_proto_rawDescData = file_evpnipsec_proto_rawDesc
)

func file_evpnipsec_proto_rawDescGZIP() []byte {
	file_evpnipsec_proto_rawDescOnce.Do(func() {
		file_evpnipsec_proto_rawDescData = protoimpl.X.CompressGZIP(file_evpnipsec_proto_rawDescData)
	})
	return file_evpnipsec_proto_rawDescData
}

var file_evpnipsec_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_evpnipsec_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_evpnipsec_proto_goTypes = []interface{}{
	(Status)(0),                              // 0: godpu.evpnipsec.Status
	(IPSecProtocol)(0),                       // 1: godpu.evpnipsec.IPSecProtocol
	(Bool)(0),                                // 2: godpu.evpnipsec.Bool
	(CryptoAlgorithm)(0),                     // 3: godpu.evpnipsec.CryptoAlgorithm
	(IntegAlgorithm)(0),                      // 4: godpu.evpnipsec.IntegAlgorithm
	(DSCPCopy)(0),                            // 5: godpu.evpnipsec.DSCPCopy
	(IPSecMode)(0),                           // 6: godpu.evpnipsec.IPSecMode
	(*Features)(nil),                         // 7: godpu.evpnipsec.Features
	(*GetSPIReq)(nil),                        // 8: godpu.evpnipsec.GetSPIReq
	(*GetSPIResp)(nil),                       // 9: godpu.evpnipsec.GetSPIResp
	(*AddSAReq)(nil),                         // 10: godpu.evpnipsec.AddSAReq
	(*AddSAResp)(nil),                        // 11: godpu.evpnipsec.AddSAResp
	(*UpdateSAReq)(nil),                      // 12: godpu.evpnipsec.UpdateSAReq
	(*UpdateSAResp)(nil),                     // 13: godpu.evpnipsec.UpdateSAResp
	(*QuerySAReq)(nil),                       // 14: godpu.evpnipsec.QuerySAReq
	(*QuerySAResp)(nil),                      // 15: godpu.evpnipsec.QuerySAResp
	(*DeleteSAReq)(nil),                      // 16: godpu.evpnipsec.DeleteSAReq
	(*DeleteSAResp)(nil),                     // 17: godpu.evpnipsec.DeleteSAResp
	(*FlushSAsReq)(nil),                      // 18: godpu.evpnipsec.FlushSAsReq
	(*FlushSAsResp)(nil),                     // 19: godpu.evpnipsec.FlushSAsResp
	(*SAIdentifier)(nil),                     // 20: godpu.evpnipsec.SAIdentifier
	(*AddSAReqData)(nil),                     // 21: godpu.evpnipsec.AddSAReqData
	(*UpdateSAReqData)(nil),                  // 22: godpu.evpnipsec.UpdateSAReqData
	(*TrafficSelectors)(nil),                 // 23: godpu.evpnipsec.TrafficSelectors
	(*LifeTimeCfg)(nil),                      // 24: godpu.evpnipsec.LifeTimeCfg
	(*LifeTime)(nil),                         // 25: godpu.evpnipsec.LifeTime
	(*TrafficSelectors_TrafficSelector)(nil), // 26: godpu.evpnipsec.TrafficSelectors.TrafficSelector
}
var file_evpnipsec_proto_depIdxs = []int32{
	0,  // 0: godpu.evpnipsec.GetSPIResp.stat:type_name -> godpu.evpnipsec.Status
	20, // 1: godpu.evpnipsec.AddSAReq.sa_id:type_name -> godpu.evpnipsec.SAIdentifier
	21, // 2: godpu.evpnipsec.AddSAReq.sa_data:type_name -> godpu.evpnipsec.AddSAReqData
	0,  // 3: godpu.evpnipsec.AddSAResp.stat:type_name -> godpu.evpnipsec.Status
	20, // 4: godpu.evpnipsec.UpdateSAReq.sa_id:type_name -> godpu.evpnipsec.SAIdentifier
	22, // 5: godpu.evpnipsec.UpdateSAReq.sa_data:type_name -> godpu.evpnipsec.UpdateSAReqData
	0,  // 6: godpu.evpnipsec.UpdateSAResp.stat:type_name -> godpu.evpnipsec.Status
	20, // 7: godpu.evpnipsec.QuerySAReq.sa_id:type_name -> godpu.evpnipsec.SAIdentifier
	0,  // 8: godpu.evpnipsec.QuerySAResp.stat:type_name -> godpu.evpnipsec.Status
	20, // 9: godpu.evpnipsec.DeleteSAReq.sa_id:type_name -> godpu.evpnipsec.SAIdentifier
	0,  // 10: godpu.evpnipsec.DeleteSAResp.stat:type_name -> godpu.evpnipsec.Status
	0,  // 11: godpu.evpnipsec.FlushSAsResp.stat:type_name -> godpu.evpnipsec.Status
	1,  // 12: godpu.evpnipsec.SAIdentifier.proto:type_name -> godpu.evpnipsec.IPSecProtocol
	6,  // 13: godpu.evpnipsec.AddSAReqData.mode:type_name -> godpu.evpnipsec.IPSecMode
	23, // 14: godpu.evpnipsec.AddSAReqData.src_ts:type_name -> godpu.evpnipsec.TrafficSelectors
	23, // 15: godpu.evpnipsec.AddSAReqData.dst_ts:type_name -> godpu.evpnipsec.TrafficSelectors
	24, // 16: godpu.evpnipsec.AddSAReqData.lifetime:type_name -> godpu.evpnipsec.LifeTimeCfg
	3,  // 17: godpu.evpnipsec.AddSAReqData.enc_alg:type_name -> godpu.evpnipsec.CryptoAlgorithm
	4,  // 18: godpu.evpnipsec.AddSAReqData.int_alg:type_name -> godpu.evpnipsec.IntegAlgorithm
	2,  // 19: godpu.evpnipsec.AddSAReqData.encap:type_name -> godpu.evpnipsec.Bool
	2,  // 20: godpu.evpnipsec.AddSAReqData.esn:type_name -> godpu.evpnipsec.Bool
	2,  // 21: godpu.evpnipsec.AddSAReqData.copy_df:type_name -> godpu.evpnipsec.Bool
	2,  // 22: godpu.evpnipsec.AddSAReqData.copy_ecn:type_name -> godpu.evpnipsec.Bool
	5,  // 23: godpu.evpnipsec.AddSAReqData.copy_dscp:type_name -> godpu.evpnipsec.DSCPCopy
	2,  // 24: godpu.evpnipsec.AddSAReqData.initiator:type_name -> godpu.evpnipsec.Bool
	2,  // 25: godpu.evpnipsec.AddSAReqData.inbound:type_name -> godpu.evpnipsec.Bool
	2,  // 26: godpu.evpnipsec.AddSAReqData.update:type_name -> godpu.evpnipsec.Bool
	2,  // 27: godpu.evpnipsec.UpdateSAReqData.encap:type_name -> godpu.evpnipsec.Bool
	2,  // 28: godpu.evpnipsec.UpdateSAReqData.new_encap:type_name -> godpu.evpnipsec.Bool
	26, // 29: godpu.evpnipsec.TrafficSelectors.ts:type_name -> godpu.evpnipsec.TrafficSelectors.TrafficSelector
	25, // 30: godpu.evpnipsec.LifeTimeCfg.time:type_name -> godpu.evpnipsec.LifeTime
	25, // 31: godpu.evpnipsec.LifeTimeCfg.bytes:type_name -> godpu.evpnipsec.LifeTime
	25, // 32: godpu.evpnipsec.LifeTimeCfg.packets:type_name -> godpu.evpnipsec.LifeTime
	7,  // 33: godpu.evpnipsec.IPSec.GetFeatures:input_type -> godpu.evpnipsec.Features
	8,  // 34: godpu.evpnipsec.IPSec.GetSPI:input_type -> godpu.evpnipsec.GetSPIReq
	10, // 35: godpu.evpnipsec.IPSec.AddSA:input_type -> godpu.evpnipsec.AddSAReq
	12, // 36: godpu.evpnipsec.IPSec.UpdateSA:input_type -> godpu.evpnipsec.UpdateSAReq
	14, // 37: godpu.evpnipsec.IPSec.QuerySA:input_type -> godpu.evpnipsec.QuerySAReq
	16, // 38: godpu.evpnipsec.IPSec.DeleteSA:input_type -> godpu.evpnipsec.DeleteSAReq
	18, // 39: godpu.evpnipsec.IPSec.FlushSAs:input_type -> godpu.evpnipsec.FlushSAsReq
	7,  // 40: godpu.evpnipsec.IPSec.GetFeatures:output_type -> godpu.evpnipsec.Features
	9,  // 41: godpu.evpnipsec.IPSec.GetSPI:output_type -> godpu.evpnipsec.GetSPIResp
	11, // 42: godpu.evpnipsec.IPSec.AddSA:output_type -> godpu.evpnipsec.AddSAResp
	13, // 43: godpu.evpnipsec.IPSec.UpdateSA:output_type -> godpu.evpnipsec.UpdateSAResp
	15, // 44: godpu.evpnipsec.IPSec.QuerySA:output_type -> godpu.evpnipsec.QuerySAResp
	17, // 45: godpu.evpnipsec.IPSec.DeleteSA:output_type -> godpu.evpnipsec.DeleteSAResp
	19, // 46: godpu.evpnipsec.IPSec.FlushSAs:output_type -> godpu.evpnipsec.FlushSAsResp
	40, // [40:47] is the sub-list for method output_type
	33, // [33:40] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_evpnipsec_proto_init() }
func file_evpnipsec_proto_init() {
	if File_evpnipsec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_evpnipsec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Features); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSPIReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSPIResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSAReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSAResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSAReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSAResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySAReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySAResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSAReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSAResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushSAsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushSAsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSAReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSAReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficSelectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LifeTimeCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LifeTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evpnipsec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficSelectors_TrafficSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_evpnipsec_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_evpnipsec_proto_goTypes,
		DependencyIndexes: file_evpnipsec_proto_depIdxs,
		EnumInfos:         file_evpnipsec_proto_enumTypes,
		MessageInfos:      file_evpnipsec_proto_msgTypes,
	}.Build()
	File_evpnipsec_proto = out.File
	file_evpnipsec_proto_rawDesc = nil
	file_evpnipsec_proto_goTypes = nil
	file_evpnipsec_proto_depIdxs = nil
}
